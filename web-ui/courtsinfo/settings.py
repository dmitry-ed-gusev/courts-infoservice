"""
    Django settings for Courts Info project.
    Generated by 'django-admin startproject' using Django 4.1.2.

    Useful info:
        - https://docs.djangoproject.com/en/4.1/topics/settings/
        - (list of settings) https://docs.djangoproject.com/en/4.1/ref/settings/

    Created:  Dmitrii Gusev, 16.10.2022
    Modified: Dmitrii Gusev, 15.12.2022
"""

import os
import sys
import logging
import environ
import dj_database_url
from pathlib import Path

log = logging.getLogger(__name__)

# Project base directory. Use it for building paths inside the project like this: BASE_DIR / 'subdir'
BASE_DIR = Path(__file__).resolve().parent.parent

# Local/not local run
LOCAL_RUN: bool = False
# check if we run locally (nasty tech :))
if (len(sys.argv) >= 2 and sys.argv[1] == 'runserver'):
    print("[*] We're running locally!")
    LOCAL_RUN = True

# Application title
APP_TITLE = 'Все суды РФ'
# Application name
APP_NAME = 'Информация о судебных делах РФ'
# Application encoding
APP_ENCODING = 'UTF-8'
# Default configuration .env file (default fallback option)
DEFAULT_ENV_CONFIG: str = ".env.prod"
# Default environment variable for configuration .env* file
ENV_CONFIG_VAR: str = 'ENV_PATH'

# setup some initial environment variables
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False),  # default value for DEBUG env variable
    ENV_NAME=(str, '<not defined>'),  # default value for ENV_NAME env variable
)

# Take environment variables from .env.* file
# env = environ.Env()  # init environment storage

# read environment from file specified by env variable or fallback to the default value
env_config_file: str = os.path.join(BASE_DIR, env.str(ENV_CONFIG_VAR, DEFAULT_ENV_CONFIG))
print(f"[*] Using environment config file: {env_config_file}")
env.read_env(env_config_file)  # read env variables to already created Env object
print(f"[*] Read the environment: {env('ENV_NAME')}")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Raises Django's ImproperlyConfigured exception if SECRET_KEY not in os.environ
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')
print(f"[*] DEBUG set to: {DEBUG}")

# the current environment name (for some tech purposes)
ENV_NAME = env('ENV_NAME')

# todo: check this setting!
ALLOWED_HOSTS = ['*', 'courts.itech-lab.ru', 'www.courts.itech-lab.ru',
                 'courtsinfo.ru', 'www.courtsinfo.ru']

# Application definition (installed django apps)
INSTALLED_APPS = [

    # - django applications
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # - django installed extensions
    'django.contrib.humanize',
    'django_extensions',
    'crispy_forms',
    'rest_framework',
    'social_django',
    'taggit',

    # - our custom applications
    'home.apps.HomeConfig',  # application for the site [Home/Main Page]
    'courts.apps.CourtsConfig',  # application for the [Courts Info Page]
    'stats.apps.StatsConfig',  # application for the [Statistics Info Page]

]

# When we get to crispy forms :)
CRISPY_TEMPLATE_PACK = 'bootstrap3'

# When we get to tagging
TAGGIT_CASE_INSENSITIVE = True

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Security setting for the CSRF qookies (as we have CsrfViewMiddleware installed/enabled)
CSRF_COOKIE_SECURE = True

# Security setting for the sessions qookies
SESSION_COOKIE_SECURE = True

# If set to True, the SecurityMiddleware redirects all non-HTTPS requests to HTTPS, may
# cause infinite redirects/loops.
# https://docs.djangoproject.com/en/4.1/ref/settings/#secure-ssl-redirect
# todo: check - maybe - turn it off
# todo: looks like should be set to True for PROD and False for DEV/LOCAL
# SECURE_SSL_REDIRECT = True

# todo: use with the accuracy!
# see docs here: https://docs.djangoproject.com/en/4.1/ref/settings/#secure-hsts-seconds
# SECURE_HSTS_SECONDS = 3600

ROOT_URLCONF = "courtsinfo.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",

                'home.context_processors.settings',  # new added
                'social_django.context_processors.backends',  # new added
                'social_django.context_processors.login_redirect',  # new added
            ],
        },
    },
]

WSGI_APPLICATION = "courtsinfo.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    # -- option I: usage of dj_database_url - it supports additional params (see in the call)
    #  - reads os.environ['DATABASE_URL'] and leaves empty config if not found
    'default': dj_database_url.config(
        conn_max_age=600,
        conn_health_checks=True,
    ),

    # -- option II: usage of django_environ
    #  - reads os.environ['DATABASE_URL'] and raises ImproperlyConfigured exception if not found
    #  - the db() method is an alias for db_url()
    # 'default': env.db(),
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization: https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "ru"  # "en-us" <- original encoding
TIME_ZONE = "EET"  # "UTC" <- default setting, EET - same as MSK -> GMT+3
USE_I18N = True
USE_L10N = True  # newly added
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = "static/"

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    )
}

# todo: social login implementation
# # Configure the social login
# try:
#     from . import github_settings
#     SOCIAL_AUTH_GITHUB_KEY = github_settings.SOCIAL_AUTH_GITHUB_KEY
#     SOCIAL_AUTH_GITHUB_SECRET = github_settings.SOCIAL_AUTH_GITHUB_SECRET
# except:
#     print('When you want to use social login, please see dj4e-samples/github_settings-dist.py')

# https://python-social-auth.readthedocs.io/en/latest/configuration/django.html#authentication-backends
# https://simpleisbetterthancomplex.com/tutorial/2016/10/24/how-to-add-social-login-to-django.html
# AUTHENTICATION_BACKENDS = (
#     'social_core.backends.github.GithubOAuth2',
#     # 'social_core.backends.twitter.TwitterOAuth',
#     # 'social_core.backends.facebook.FacebookOAuth2',

#     'django.contrib.auth.backends.ModelBackend',
# )

LOGOUT_REDIRECT_URL = '/'
LOGIN_REDIRECT_URL = '/'

# Don't set default LOGIN_URL - let django.contrib.auth set it when it is loaded
# LOGIN_URL = '/accounts/login'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# logging configuration for django, see more:
#   - https://docs.djangoproject.com/en/4.0/topics/logging/
#   - https://docs.djangoproject.com/en/4.0/ref/logging/#default-logging-configuration
#   - https://docs.djangoproject.com/en/4.0/howto/logging/#logging-how-to
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,

    "formatters": {  # logging formatters

        "standard": {  # standard log format
            "format": "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
        },

        "simple": {  # usually used log format
            "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        },

        'verbose': {  # verbose experimental format
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },

    },  # end of formatters block

    "handlers": {  # logging handlers

        "default": {  # default handler (for emergency cases)
            "level": "DEBUG",
            "formatter": "standard",
            "class": "logging.StreamHandler",
            "stream": "ext://sys.stdout",  # default is stderr
        },

        "console": {  # usual console handler
            "class": "logging.StreamHandler",
            "level": "DEBUG",
            "formatter": "simple",
            "stream": "ext://sys.stdout",
        },

        "std_file_handler": {
            "class": "logging.handlers.RotatingFileHandler",
            "level": "DEBUG",
            "formatter": "simple",
            "filename": str(BASE_DIR) + "/logs/log_info.log",
            "maxBytes": 10485760,  # 10MB
            "backupCount": 20,
            "encoding": APP_ENCODING,
        },

        "error_file_handler": {
            "class": "logging.handlers.RotatingFileHandler",
            "level": "ERROR",
            "formatter": "simple",
            "filename": str(BASE_DIR) + "/logs/log_errors.log",
            "maxBytes": 10485760,  # 10MB
            "backupCount": 20,
            "encoding": APP_ENCODING,
        },

    },  # end of handlers block

    "loggers": {  # defining logger block

        'django': {  # dedicated django logger - log only to console
            'handlers': ['console'],
            'level': env.str('DJANGO_LOG_LEVEL'),
            'propagate': False,
        },

        'django.db.backends': {  # django DB backend logger
            'handlers': ['console', 'std_file_handler'],
            'level': env.str('DJANGO_DB_LOG_LEVEL'),
        },

        'parso': {  # django shell parser/autocomplete, it worth to have it upper DEBUG (too verbose)
            'level': 'INFO',  # todo: consider set it to WARN...
        },

        "__main__": {  # if __name__ == '__main__' - emergency case!!!
            "handlers": ["default"],
            "level": env.str('ROOT_LOG_LEVEL'),
            "propagate": False,
        },

    },  # end of loggers module

    "root": {  # root logger
        "level": env.str('ROOT_LOG_LEVEL'),
        "handlers": ["console", "std_file_handler", "error_file_handler"],
    },

}  # end of LOGGING block
